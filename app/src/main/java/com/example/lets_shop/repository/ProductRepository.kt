package com.example.lets_shop.repository

import android.content.Context
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import com.example.lets_shop.db.ProductsDB
import com.example.lets_shop.models.Product
import com.example.lets_shop.retrofit.ApiInterface
import com.example.lets_shop.utils.NetworkUtils
import javax.inject.Inject

// Instance of retrofit Interface, Database Helper class and Context generated by the Dagger itself using the constructor
// Dependency Injection
class ProductRepository @Inject constructor(
    private val apiInterface: ApiInterface,
    private val productsDB: ProductsDB,
    private val applicationContext: Context
) {

    // creating the liveData for observing the list of product fetched by the network call or Database (RoomDB)
    private val productLiveData = MutableLiveData<List<Product>>()
    val products: LiveData<List<Product>>
        get() = productLiveData

    // Suspend function to get the product.
    suspend fun getProducts() {
        // checking if the Network is available then fetching the list of Product from the Netwrok Call itself.
        if (NetworkUtils.isInternetAvailable(applicationContext)) {
            val result = apiInterface.getProducts()
            if (result.isSuccessful && result.body() != null) {
                productsDB.getProductDao().addProducts(result.body()!!)
                productLiveData.postValue(result.body())
            }
        }
        // If the network is not available means the internet is turned off then in that case fetching from the roomDB
        else {
            val products = productsDB.getProductDao().getProducts()
            productLiveData.postValue(products)
        }

    }

}